package net.ctrdn.stuba.dbs.netmonitor.hbm;
// Generated Apr 5, 2014 4:21:51 PM by Hibernate Tools 3.6.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

/**
 * NmProbe generated by hbm2java
 */
@Entity
@Table(name = "nm_probe", catalog = "stuba_netmonitor"
)
public class NmProbe implements java.io.Serializable {

    private Integer id;
    private NmProbeType nmProbeType;
    private NmDevice nmDevice;
    private int probeStatus;
    private Date lastUpdateDate;
    private Date createDate;
    private Set nmProbeStatses = new HashSet(0);
    private Set nmInterfaces = new HashSet(0);
    private Set nmInterfaceAggregatedStatses = new HashSet(0);

    public NmProbe() {
    }

    public NmProbe(NmProbeType nmProbeType, NmDevice nmDevice, int probeStatus, Date createDate) {
        this.nmProbeType = nmProbeType;
        this.nmDevice = nmDevice;
        this.probeStatus = probeStatus;
        this.createDate = createDate;
    }

    public NmProbe(NmProbeType nmProbeType, NmDevice nmDevice, int probeStatus, Date lastUpdateDate, Date createDate, Set nmProbeStatses, Set nmInterfaces, Set nmInterfaceAggregatedStatses) {
        this.nmProbeType = nmProbeType;
        this.nmDevice = nmDevice;
        this.probeStatus = probeStatus;
        this.lastUpdateDate = lastUpdateDate;
        this.createDate = createDate;
        this.nmProbeStatses = nmProbeStatses;
        this.nmInterfaces = nmInterfaces;
        this.nmInterfaceAggregatedStatses = nmInterfaceAggregatedStatses;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "probe_type_id", nullable = false)
    public NmProbeType getNmProbeType() {
        return this.nmProbeType;
    }

    public void setNmProbeType(NmProbeType nmProbeType) {
        this.nmProbeType = nmProbeType;
    }

    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "device_id", nullable = false)
    public NmDevice getNmDevice() {
        return this.nmDevice;
    }

    public void setNmDevice(NmDevice nmDevice) {
        this.nmDevice = nmDevice;
    }

    @Column(name = "probe_status", nullable = false)
    public int getProbeStatus() {
        return this.probeStatus;
    }

    public void setProbeStatus(int probeStatus) {
        this.probeStatus = probeStatus;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_update_date", length = 19)
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    public void setLastUpdateDate(Date lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "create_date", nullable = false, length = 19)
    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "nmProbe", cascade = CascadeType.ALL)
    @NotFound(action = NotFoundAction.IGNORE)
    public Set getNmProbeStatses() {
        return this.nmProbeStatses;
    }

    public void setNmProbeStatses(Set nmProbeStatses) {
        this.nmProbeStatses = nmProbeStatses;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "nmProbe", cascade = CascadeType.ALL)
    @NotFound(action = NotFoundAction.IGNORE)
    public Set getNmInterfaces() {
        return this.nmInterfaces;
    }

    public void setNmInterfaces(Set nmInterfaces) {
        this.nmInterfaces = nmInterfaces;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "nmProbe", cascade = CascadeType.ALL)
    @NotFound(action = NotFoundAction.IGNORE)
    public Set getNmInterfaceAggregatedStatses() {
        return this.nmInterfaceAggregatedStatses;
    }

    public void setNmInterfaceAggregatedStatses(Set nmInterfaceAggregatedStatses) {
        this.nmInterfaceAggregatedStatses = nmInterfaceAggregatedStatses;
    }

}
